OpenTitus uses the OPL (adlib) emulator found in chocolate-doom (libopl.a). It is included, pre-compiled, in this source package. If you want to compile the emulator yourself, download chocolate-doom source (1.6.0), replace dbopl.c with the one in this folder (it contains a small bugfix around the abort() calls to prevent the emulator to crash when a percussion instrument is playing), compile it, move opl/libopl.a to this folder, rename it to libopl_*.a, compile OpenTitus and enjoy!

For win32/mingw/msys compiling, it might be tricky to get SDL_Mixer up and running. Simply download SDL_mixer devel-VC, rename SDL_mixer.lib to libSDL_mixer.a and move it to MinGW/lib/libSDL_mixer.a. Copy include/SDL_mixer.h to MinGW/include/SDL/SDL_mixer.h.

For dingux compiling, copy dbopl_light.c, config.h and make_dingux.sh to chocolate-doom's opl folder, make make_dingux.sh executable and execute it with ./make_dingux.sh (dbopl_light.c have a slight modification at line 1088 which makes it faster to generate percussion sounds, libopl_dingux_slow.a is compiled with the ordinary dbopl.c).

The compiled emulator should be placed as follow:
win32: libopl_win32.a
linux: libopl_linux.a
dingux; libopl_dingux.a

The audio data is extracted from FOX.EXE (generated by Audioplay_standalone), at offset 28677, counting 18749 bytes (segment starting at 27376, pointer difference: -1301). Raw data is inside music_ttf_dataonly.bin for reference.

Moktar: Extracted from MOKTAR.EXE, at offset 28817, counting 18184 bytes (segment starting at 27472, pointer difference: -1345). Raw data is inside music_mok_dataonly.bin for reference.

Additional data is added to the beginning of the audio files (music_ttf.bin/music_mok.bin), see doc/audio.txt for reference.
